priority -50

###########################################################################
#                            HF Snippets                                  #
###########################################################################

snippet csdict
NSDictionary* dict = [[CSConfigManager sharedManager] dictionaryForKey:@"${1}" defaultRule:@{${2}}];
endsnippet

snippet csstr
NSString* str = [[CSConfigManager sharedManager] stringForKey:@"${1}" defaultRule:@"${2}"];
endsnippet

snippet enum 
typedef NS_ENUM(NSUInteger, $1) {
	$2
};
endsnippet

snippet str2data
NSData *data = [${1:str} dataUsingEncoding:NSUTF8StringEncoding];
endsnippet

snippet data2json
NSDictionary* ${1:dict} = [NSJSONSerialization JSONObjectWithData:data options:0 error:nil];
endsnippet

snippet json2data
NSData* data = [NSJSONSerialization dataWithJSONObject:${1:dict} options:0 error:nil];
endsnippet

snippet session "NSURLSession"
NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithURL:[NSURL URLWithString:@"https://"] 
																				completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) 
{
	NSDictionary *json = [NSJSONSerialization JSONObjectWithData:data options:0 error:nil];
	NSLog(@"%@", json);
}];
[dataTask resume];
endsnippet

snippet m "method"
- (${1:void})${2:dummy}
{ 
	${3}
}
endsnippet

# RACObserve NSObject+RACPropertySubscribing.h
# import "EXTSynthesize.h"
snippet @syn "category property"
@synthesizeAssociation(`!p snip.rv = re.sub(r'\..*$', '', fn)`, ${1:myProperty}); // add category variable
endsnippet

snippet @sy "synchronize"
@synchronized(self){
	$1
}
endsnippet

snippet error
[NSError errorWithDomain:@"${1:domain}" code:${2:123} userInfo:@{NSLocalizedDescriptionKey:@"${3}"}]
endsnippet

snippet waitForever
[[expectFutureValue(done) shouldEventuallyBeforeTimingOutAfter(10000000000)] beTrue];
endsnippet

snippet safedef "SAFE_CAST_DEFINITION"
#ifndef SAFE_CAST
#define SAFE_CAST(Object, Type) ((Type *)safe_cast_helper(Object, [Type class]))
static inline id safe_cast_helper(id x, Class c) {
	return [x isKindOfClass:c] ? x : nil;
}
#endif
endsnippet

snippet safe "SAFE_CAST"
[${1} isKindOfClass:[${2} class]] ? ($2*)$1 : nil
endsnippet

snippet context
context(@"${1:when something happened}", ^{
	${2}
});
endsnippet

snippet it
it(@"${1:does something }", ^{
	${2}
});
endsnippet

snippet btype "typedef block"
typedef void (^${1:OnIdComplete})(id data, NSError* error);
endsnippet 

snippet OnComplete
(void(^)(${1:id}))
endsnippet

snippet enumerate
enumerateKeysAndObjectsUsingBlock:^(NSString* key, ${1:NSObject}* value, BOOL* stop){
	${2}
}];
endsnippet

snippet doNext
doNext:^(id x) {
	${2}
}];
endsnippet

snippet subscribeNext
subscribeNext:^(id x) {
	${2}
}];
endsnippet

snippet subscribeCompleted
subscribeCompleted:^{
	${2}
}];
endsnippet

snippet completed
completed:^{
	${2}
}];
endsnippet

snippet subscribe
subscribeNext:^(id x) {
	${2}
} error:^(NSError *error) {
} completed:^{
}];
endsnippet

snippet filter
filter:^BOOL(id value)){
	${2}
}];
endsnippet

snippet map
map:^${1:id}(${2:id} ${3:value}){
	${4}
}];
endsnippet

snippet flattenMap
flattenMap:^(id value){
	${2}
}];
endsnippet

snippet startLazily "startLazilyWithScheduler"
[RACSignal startLazilyWithScheduler:self.scheduler block:^(id<RACSubscriber> subscriber) {
	[subscriber sendNext:nil];
	[subscriber sendCompleted];
}];
endsnippet

snippet createSignal
[RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) 
{
	${1}
	return [RACDisposable disposableWithBlock:^{
		
	}];
}];
endsnippet

snippet session "Download with NSURLSession"
NSURL* url = nil;
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
	NSLog(@"%@",[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]);
} ];
[task resume];
_task = task;
endsnippet

snippet nsp "ParameterAssert"
NSParameterAssert(${1:NO});
endsnippet

snippet nsc "NSCAssert"
NSCAssert(${1:NO}, @"${2}");
endsnippet

snippet as "Assert"
NSAssert(${1:NO}, @"${2}");
endsnippet

snippet @pn "Nonatomic Property"
@property (nonatomic, ${1/^(e)$|.*/(?1:s)/}${1:s}${1/^(?:(s)|(r)|(c)|(a)|(w))$|.*/(?1:trong)(?2:eadonly)(?3:opy)(?4:ssign)(?5:eak)/}) ${2:NSSomeClass}* ${3:${2/^[A-Z](?:[A-Z]+|[a-z]+)([A-Z]\w*)/\l$1/}};
endsnippet

snippet @p "Property"
@property (${1/^(e)$|.*/(?1:s)/}${1:s}${1/^(?:(s)|(r)|(c)|(a)|(w))$|.*/(?1:trong)(?2:eadonly)(?3:opy)(?4:ssign)(?5:eak)/}) ${2:NSSomeClass}* ${3:${2/^[A-Z](?:[A-Z]+|[a-z]+)([A-Z]\w*)/\l$1/}};
endsnippet

snippet r "return"
return ${1}
endsnippet

snippet { "curly bracket"
{
	${1}
}
endsnippet

snippet for "forin loop"
for (${1:object} in ${2:objects}) {
	${3}
}
endsnippet

snippet fori "for i loop"
for (NSInteger i = 0; i < ${1:count}; ++i) {
	${2}
}
endsnippet

snippet forj "for index loop"
for (NSInteger j = 0; j < ${1:count}; ++j) {
	${2}
}
endsnippet

snippet isk "isKindOfClass"
isKindOfClass:${1:NSString} class${2}
endsnippet

snippet @str "strongify"
__strong __typeof__(selfRef) self = selfRef;
endsnippet

snippet @wea "weakify"
__weak __typeof__(self) selfRef = self;
endsnippet

snippet @st "strongify"
@strongify(self);
endsnippet

snippet @we "weakify"
@weakify(self);
endsnippet

snippet once "dispatch_once" 
static dispatch_once_t onceToken;
dispatch_once(&onceToken, ^{
	$1
});
endsnippet

snippet retainCount "retainCount leak check"
[[expectFutureValue(@((long)CFGetRetainCount((__bridge CFTypeRef)${1:myObj}) == 2)) shouldEventuallyBeforeTimingOutAfter(30.0)] beTrue];
endsnippet

snippet #im "#import (imp)" b
#import "${1:`!p snip.rv = re.sub(r'\..*$', '.h', fn)`}"
endsnippet

snippet #imp "#import <> (Imp)"
#import <${1:Foundation/Foundation.h}>
endsnippet

snippet @imp "@import <> (Imp)"
@import ${1:ReactiveObjC};
endsnippet

snippet bl "Block Local Variable"
${1:returnType} (^${2:blockName})(${3:parameterTypes}) = ^$1($3) {
	$4
};
endsnippet
snippet bm "Block Method Parameters"
(${1:returnType} (^)(${2:parameterTypes}))${3:blockName}
endsnippet

snippet bp "Block Property"
@property (nonatomic, copy) ${1:void} (^${2:blockName})(${3:parameterTypes}); 
endsnippet

snippet ext "weakify header"
#import "RACEXTScope.h"
endsnippet

snippet if "if"
if ($1) {
	$2
} 
endsnippet

snippet else "else"
else {
	$1
}
endsnippet

snippet @ob "object declaration"
@interface ${1} : ${2:NSObject}
${3}
@end

@implementation $1

@end
endsnippet

snippet @in "interface"
@interface `!p snip.rv = re.sub(r'\..*$', '', fn)` : NSObject
${3}
@end
endsnippet

snippet @int "extension"
@interface `!p snip.rv = re.sub(r'\..*$', '', fn)`()
${3}
@end
endsnippet

snippet @im "implementation"
@implementation `!p snip.rv = re.sub(r'\..*$', '', fn)`

- (instancetype)init
{
	if (self = [super init]) {
		$0
	}
	return self;
}

@end
endsnippet

snippet init
- (instancetype)init
{
	if (self = [super init]) {
		$0
	}
	return self;
}
endsnippet

snippet lumberjack "Cocoa Lumberjack import"
#import <CocoaLumberjack/CocoaLumberjack.h>
#import "DDLog+LOGV.h" // for LOAD_ASYNC_ENABLED definition, not included in CocoaLumberJack.h

// CocoaLumberjack module will have its own definition
// we need to undef it
#ifdef LOG_LEVEL_DEF
#undef LOG_LEVEL_DEF
#endif
#define LOG_LEVEL_DEF ${1:MyModuleLogLevel}
extern DDLogLevel $1;
endsnippet

# header template for .m files
# the project name is set to the name of working directory
# implementation see: http://vi.stackexchange.com/questions/2867/how-do-you-chomp-a-string-in-vim
snippet mt
//
//  `!p snip.rv = re.sub(r'\..*$', '.m', fn)`
//  `!v split(getcwd(), '/')[-1]`
//
//  Created by `!v systemlist('git config user.name || whoami')[0]` on `!v strftime('%Y/%m/%d')`.
//
//

#import "`!p snip.rv = re.sub(r'\..*$', '.h', fn)`"
endsnippet

# header template for .h files
snippet ht
//
//  `!p snip.rv = re.sub(r'\..*$', '.h', fn)`
//  `!v split(getcwd(), '/')[-1]`
//
//  Created by `!v systemlist('git config user.name || whoami')[0]` on `!v strftime('%Y/%m/%d')`.
//
//

@import Foundation;
endsnippet

# spec template for kiwi and nocilla spec files
snippet nt
//
//  `!p snip.rv = re.sub(r'\..*$', '.m', fn)`
//  `!v split(getcwd(), '/')[-1]`
//
//  Created by `!v systemlist('git config user.name || whoami')[0]` on `!v strftime('%Y/%m/%d')`.
//

#import <Kiwi/Kiwi.h>
#import "Nocilla.h"
#import "`!p snip.rv = re.sub(r'\..*$', '', fn)[:-4:] + ".h"`"

// bundleName doesn't have extension (e.g. ".bundle")
void loadBundle(NSString* bundleName, NSObject* testSpec)
{
	NSString* localDomainName = @"localtest.com";
	NSString* dataName        = bundleName;
	NSString* fileName        = [dataName stringByAppendingPathExtension:@"bundle"];

	NSBundle* bundle          = [NSBundle bundleForClass:testSpec.class];
	NSString* bundlePath      = [bundle pathForResource:[fileName stringByDeletingPathExtension] ofType:[fileName pathExtension]];
	NSBundle* resourceBundle  = [NSBundle bundleWithPath:bundlePath];

	NSString* htmlName        = [NSString stringWithFormat:@"%@.html", dataName];
	NSString* folderName      = [NSString stringWithFormat:@"%@_files", dataName];
	NSString* folderPath      = [resourceBundle.resourcePath stringByAppendingPathComponent:folderName];
	NSString* htmlPath        = [resourceBundle.resourcePath stringByAppendingPathComponent:htmlName];
	NSData*   htmlData        = [NSData dataWithContentsOfFile:htmlPath];
	NSString* htmlStr         = nil;
	BOOL lossy                = NO;
	NSStringEncoding encoding = [NSString stringEncodingForData:htmlData encodingOptions:nil convertedString:&htmlStr usedLossyConversion:&lossy];
	NSString* htmlLink        = [[NSString stringWithFormat:@"https://%@/%@", localDomainName, htmlName] stringByAddingPercentEscapesUsingEncoding:encoding];
	NSError* error            = nil;
	
	stubRequest(@"GET", htmlLink).
	andReturn(200).
	withBody(htmlData);
	
	NSArray* files = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:folderPath error:&error];
	for (NSString* filePath in files) {
		NSString* path = [NSString stringWithFormat:@"https://%@/%@/%@", localDomainName, [folderPath lastPathComponent],filePath];
		NSString* encoded = [path stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
		NSData* data = [NSData dataWithContentsOfFile:[folderPath stringByAppendingPathComponent:filePath]];
		stubRequest(@"GET", encoded).
		andReturn(200).
		withBody(data);
	}
}

SPEC_BEGIN(`!p snip.rv = re.sub(r'\..*$', '', fn)`)

describe(@"`!p snip.rv = re.sub(r'\..*$', '', fn)[:-4:]`", ^{

	let(testee, ^{ // Occurs before each enclosed "it"
		return [[`!p snip.rv = re.sub(r'\..*$', '', fn)[:-4:]` alloc] init];
	});
	let(done, ^{ // Occurs before each enclosed "it"
		return @(0);
	});
	
	beforeAll(^{ // Occurs once
		[[LSNocilla sharedInstance] start];
	});
	
	afterAll(^{ // Occurs once
		[[LSNocilla sharedInstance] stop];
	});
	
	beforeEach(^{ // Occurs before each enclosed "it"
	});
	
	afterEach(^{ // Occurs after each enclosed "it"
		[[LSNocilla sharedInstance] clearStubs];
	});
	
	specify(^{
		[[testee shouldNot] beNil];
	});
	
	it(@"should do something", ^{
		[[testee should] meetSomeExpectation];
	});
	
	it(@"asynchronous do something", ^{
		[[testee should] meetSomeExpectation];
		done = @(1);
		[[expectFutureValue(done) shouldEventually] beTrue];
	});
	
	pending(@"something unimplemented", ^{
	});

});

SPEC_END
endsnippet


# spec template for kiwi spec files
snippet ut
//
//  `!p snip.rv = re.sub(r'\..*$', '.m', fn)`
//  `!v split(getcwd(), '/')[-1]`
//
//  Created by `!v systemlist('git config user.name || whoami')[0]` on `!v strftime('%Y/%m/%d')`.
//

@import Kiwi;
#import "`!p snip.rv = re.sub(r'\..*$', '', fn)[:-4:] + ".h"`"

SPEC_BEGIN(`!p snip.rv = re.sub(r'\..*$', '', fn)`)

describe(@"`!p snip.rv = re.sub(r'\..*$', '', fn)[:-4:]`", ^{

	let(testee, ^{ // Occurs before each enclosed "it"
		return [[`!p snip.rv = re.sub(r'\..*$', '', fn)[:-4:]` alloc] init];
	});
	let(done, ^{ // Occurs before each enclosed "it"
		return @(0);
	});
	
	beforeAll(^{ // Occurs once
	});
	
	afterAll(^{ // Occurs once
	});
	
	beforeEach(^{ // Occurs before each enclosed "it"
	});
	
	afterEach(^{ // Occurs after each enclosed "it"
	});
	
	specify(^{
		[[testee shouldNot] beNil];
	});
	
	it(@"should do something", ^{
		[[testee should] meetSomeExpectation];
	});
	
	it(@"asynchronous do something", ^{
		[[testee should] meetSomeExpectation];
		done = @(1);
		[[expectFutureValue(done) shouldEventuallyBeforeTimingOutAfter(100000.0)] beTrue];
	});
	
	pending(@"something unimplemented", ^{
	});

});

SPEC_END
endsnippet

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

#snippet imp "#import (imp)" b
##import "${1:`!p snip.rv = re.sub(r'\..*$', '.h', fn)`}"
#endsnippet

#snippet Imp "#import <> (Imp)"
##import <${1:Cocoa/Cocoa.h}>
#endsnippet

snippet cl "020 Class (objc)"
@interface ${1:`!p
if len(fn):
		snip.rv = re.sub(r'\..*$', '', fn)
else:
		snip.rv = "object"
`} : ${2:NSObject}
{
}
@end

@implementation $1
- (id)init
{
	if((self = [super init]))
	{$0
	}
	return self;
}
@end
endsnippet

snippet array "NSArray (array)"
NSMutableArray *${1:array} = [NSMutableArray array];
endsnippet

snippet dict "NSDictionary (dict)"
NSMutableDictionary *${1:dict} = [NSMutableDictionary dictionary];
endsnippet

snippet forarray "for NSArray loop (forarray)"
unsigned int	${1:object}Count = [${2:array} count];

for(unsigned int index = 0; index < $1Count; index += 1)
{
	${3:id}	$1 = [$2 objectAtIndex:index];
	$0
}
endsnippet

snippet objacc "Object Accessors (objacc)"
- (${1:id})${2:thing}
{
	return $2;
}

- (void)set${2/./\u$0/}:($1)aValue
{
	$0${1/( \*)?$/(?1:$1: )/}old${2/./\u$0/} = $2;
	$2 = [aValue retain];
	[old${2/./\u$0/} release];
}
endsnippet

snippet sel "@selector"
@selector(${1:method}:)
endsnippet

snippet cdacc "CoreData Accessors Implementation"
- (${1:id})${2:attribute}
{
	[self willAccessValueForKey:@"$2"];
	$1 value = [self primitiveValueForKey:@"$2"];
	[self didAccessValueForKey:@"$2"];
	return value;
}

- (void)set${2/./\u$0/}:($1)aValue
{
	[self willChangeValueForKey:@"$2"];
	[self setPrimitiveValue:aValue forKey:@"$2"];
	[self didChangeValueForKey:@"$2"];
}
endsnippet

# don't know how to use it
#snippet delegate "Delegate Responds to Selector"
#if([${1:[self delegate]} respondsToSelector:@selector(${2:selfDidSomething:})])
	#[$1 ${3:${2/((^\s*([A-Za-z0-9_]*:)\s*)|(:\s*$)|(:\s*))/(?2:$2self :\:<>)(?4::)(?5: :)/g}}];

#endsnippet

snippet thread "Detach New NSThread"
[NSThread detachNewThreadSelector:@selector(${1:method}:) toTarget:${2:aTarget} withObject:${3:anArgument}]
endsnippet

snippet ibo "IBOutlet (ibo)"
IBOutlet ${1:NSSomeClass} *${2:${1/^[A-Z](?:[A-Z]+|[a-z]+)([A-Z]\w*)/\l$1/}};
endsnippet

snippet I "Initialize Implementation (I)"
+ (void)initialize
{
	[[NSUserDefaults standardUserDefaults] registerDefaults:[NSDictionary dictionaryWithObjectsAndKeys:
		$0@"value", @"key",
		nil]];
}
endsnippet

snippet bind "Key:value binding (bind)"
bind:@"${1:binding}" toObject:${2:observableController} withKeyPath:@"${3:keyPath}" options:${4:nil}
endsnippet

snippet arracc "LoD array (arracc)"
- (void)addObjectTo${1:Things}:(${2:id})anObject
{
	[${3:${1/./\l$0/}} addObject:anObject];
}

- (void)insertObject:($2)anObject in$1AtIndex:(unsigned int)i
{
	[$3 insertObject:anObject atIndex:i];
}

- ($2)objectIn$1AtIndex:(unsigned int)i
{
	return [$3 objectAtIndex:i];
}

- (unsigned int)indexOfObjectIn$1:($2)anObject
{
	return [$3 indexOfObject:anObject];
}

- (void)removeObjectFrom$1AtIndex:(unsigned int)i
{
	[$3 removeObjectAtIndex:i];
}

- (unsigned int)countOf$1
{
	return [$3 count];
}

- (NSArray *${1/./\l$0/}
{
	return $3;
}

- (void)set$1:(NSArray *)new$1
{
	[$3 setArray:new$1];
}
endsnippet

snippet arracc "LoD array interface (arracc)"
- (void)addObjectTo${1:Things}:(${2:id})anObject;
- (void)insertObject:($2)anObject in$1AtIndex:(unsigned int)i;
- ($2)objectIn$1AtIndex:(unsigned int)i;
- (unsigned int)indexOfObjectIn$1:($2)anObject;
- (void)removeObjectFrom$1AtIndex:(unsigned int)i;
- (unsigned int)countOf$1;
- (NSArray *)${1/./\l$0/};
- (void)set$1:(NSArray *)new$1;
endsnippet

snippet focus "Lock Focus"
[self lockFocus];
$0
[self unlockFocus];
endsnippet

snippet pool "NSAutoreleasePool (pool)"
NSAutoreleasePool *pool = [NSAutoreleasePool new];
$0
[pool drain];
endsnippet

snippet log "NSLog (log) 2"
NSLog(@"$1"${1/[^%]*(%)?.*/(?1:, :\);)/}$2${1/[^%]*(%)?.*/(?1:\);)/}
endsnippet

snippet alert "NSRunAlertPanel (alert)"
int choice = NSRunAlertPanel(@"${1:Something important!}", @"${2:Something important just happend, and now I need to ask you, do you want to continue?}", @"${3:Continue}", @"${4:Cancel}", nil);
if(choice == NSAlertDefaultReturn) // "$3"
{
	$0;
}
else if(choice == NSAlertAlternateReturn) // "$4"
{
		$0
}
endsnippet

snippet format "NSString stringWithFormat (format)"
[NSString stringWithFormat:@"$1", $2]$0
endsnippet

snippet objacc "Object Accessors Interface (objacc)"
- (${1:id})${2:thing};
- (void)set${2/./\u$0/}:($1)aValue;
endsnippet

#snippet prop "Property"
#@property (${1/^(e)$|.*/(?1:r)/}${1:r}${1/^(?:(r)|(e)|(c)|(a))$|.*/(?1:etain)(?2:adonly)(?3:opy)(?4:ssign)/}) ${2:NSSomeClass}$ *${3:${2/^[A-Z](?:[A-Z]+|[a-z]+)([A-Z]\w*)/\l$1/}};
#endsnippet

snippet getprefs "Read from defaults (getprefs)"
[[NSUserDefaults standardUserDefaults] objectForKey:${1:key}];
endsnippet

snippet obs "Register for Notification"
[[NSNotificationCenter defaultCenter] addObserver:${1:self} selector:@selector(${3:${2/^([A-Z]{2})?(.+?)(Notification)?$/\l$2/}}:) name:${2:NSWindowDidBecomeMainNotification} object:${4:nil}];
endsnippet

snippet responds "Responds to Selector"
if ([${1:self} respondsToSelector:@selector(${2:someSelector:})])
{
		[$1 ${3:${2/((:\s*$)|(:\s*))/:<>(?3: )/g}}];
}
endsnippet

snippet gsave "Save and Restore Graphics Context (gsave)"
[NSGraphicsContext saveGraphicsState];
$0
[NSGraphicsContext restoreGraphicsState];

endsnippet

snippet acc "Scalar Accessors (acc)"
- (${1:unsigned int})${2:thing}
{
	return ${3:$2};
}

- (void)set${2/./\u$0/}:(${1:unsigned int})new${2/./\u$0/}
{
	$3 = new${2/./\u$0/};
}
endsnippet

snippet acc "Scalar Accessors Interface (acc)"
- (${1:unsigned int})${2:thing};
- (void)set${2/./\u$0/}:($1)new${2/./\u$0/};
endsnippet

snippet stracc "String Accessors (stracc)"
- (NSString *)${1:thing}
{
	return ${2:$1};
}

- (void)set${1/.*/\u$0/}:(NSString *)/})${3:a${1/.*/\u$0/}}
{
	$3 = [$3 copy];
	[$2 release];
	$2 = $3;
}
endsnippet

# syn is used for category property
#snippet syn "Synthesize"
#@synthesize ${1:property};
#endsnippet

snippet setprefs "Write to defaults (setprefs)"
[[NSUserDefaults standardUserDefaults] setObject:${1:object} forKey:${2:key}];
endsnippet

# vim:ft=snippets:
